;;; -*- lexical-binding: t -*-
#+PROPERTY: header-args:emacs-lisp :tangle yes
* Emacs Configuration.. semi-literate
** Packages
*** Bootstrap
This section sets up straight.el, which will be used in place of package.el.
We'll set up use-package next.
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
  (with-current-buffer
    (url-retrieve-synchronously
     "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
     'silent 'inhibit-cookies)
  (goto-char (point-max))
  (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
*** Custom file location
custom and the way it stores items in init.el is one of the dumber things
emacs does. well whatever, we move it
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file 'noerror)
#+end_src

*** use-package
Pretty straight forward use-package invocation. Uses straight.el to bootstrap
use-package.
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (eval-when-compile (require 'use-package))
#+end_src

** Performance
*** Measuring startup speed
Function copied from sqrtminusone's config, measures emacs startup time.
#+begin_src emacs-lisp
  (setq my/emacs-started nil)

  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done))
	    (setq my/emacs-started t))
#+end_src

*** Garbage collection
#+begin_src emacs-lisp
  (setq gc-cons-threshold 80000000)
  (setq read-process-output-max (* 1024 1024))
#+end_src

** Config Files
*** No littering
I actually didn't know about this package until reading through sqrtminusone's
emacs config. But uhh yeah, emacs leaves tmp files all over and it's annoying.
lets change that
#+begin_src emacs-lisp
(use-package no-littering
  :straight t)
#+end_src
*** Make it harder to kill emacs
This will prompt us when we're going to kill Emacs.
#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

** General settings
*** Keybindings
**** general.el
general.el provides a convenient interface to manage Emacs keybindings.
I don't know if I'll use this long term, at the moment I'm just cargo-culting.
#+begin_src emacs-lisp
  (use-package general
    :straight t
    :config
    (general-evil-setup))
#+end_src

**** which-key
A package that displays the available keybindings in a popup.
The package is pretty useful, as Emacs seems to have more keybindings than
I can remember at any given point.
#+begin_src emacs-lisp
(use-package which-key
  :config
  (setq which-key-idle-delay 0.3)
  (setq which-key-popup-type 'frame)
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (set-face-attribute 'which-key-local-map-description-face nil
		      :weight 'bold)
  :straight t)
#+end_src

**** dump keybindings
A function to dump keybindings starting with a prefix to a buffer in a tree-like form.

Taken from: https://sqrtminusone.xyz/configs/emacs/

#+begin_src emacs-lisp
(defun my/dump-bindings-recursive (prefix &optional level buffer)
  (dolist (key (which-key--get-bindings (kbd prefix)))
    (with-current-buffer buffer
      (when level
	(insert (make-string level ? )))
      (insert (apply #'format "%s%s%s\n" key)))
    (when (string-match-p
	   (rx bos "+" (* nonl))
	   (substring-no-properties (elt key 2)))
      (my/dump-bindings-recursive
       (concat prefix " " (substring-no-properties (car key)))
       (+ 2 (or level 0))
       buffer))))

(defun my/dump-bindings (prefix)
  "Dump keybindings starting with PREFIX in a tree-like form."
  (interactive "sPrefix: ")
  (let ((buffer (get-buffer-create "bindings")))
    (with-current-buffer buffer
      (erase-buffer))
    (my/dump-bindings-recursive prefix 0 buffer)
    (with-current-buffer buffer
      (goto-char (point-min)))
    (switch-to-buffer-other-window buffer)))
#+end_src

*** Editing modez
**** Meow
This is pretty new to me, I'm a vimmer by trade. But lets see how it goes.

#+begin_src emacs-lisp
  (use-package meow
    :config
    (defun meow-setup () ;; from https://github.com/meow-edit/meow/blob/master/KEYBINDING_QWERTY.org
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       '("<escape>" . ignore))
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("j" . "H-j")
       '("k" . "H-k")
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . ignore)))
    (meow-setup)
    (meow-global-mode 1)
    :straight t)
#+end_src

*** Theme
**** modus-theme
masterpiece of the one and only prot

#+begin_src emacs-lisp
(use-package modus-themes
  :straight t
  :config
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil)

  ;; Maybe define some palette overrides, such as by using our presets
  (setq modus-themes-common-palette-overrides
        modus-themes-preset-overrides-intense)

  ;; Load the theme of your choice.
  (load-theme 'modus-vivendi)

  (define-key global-map (kbd "<f5>") #'modus-themes-toggle))
#+end_src

**** Font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Mono 14"))
  (set-face-attribute 'default t :font "FiraCode Nerd Font Mono 14")
#+end_src

*** Programming Modes
**** nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :straight t)
#+end_src

**** Rust
***** rust-mode
#+begin_src emacs-lisp
  (use-package rust-mode
    :straight t
    :hook ((lambda () (setq indent-tabs-mode nil))
	   (lambda () (prettify-symbols-mode)))
    :config
    (setq rust-format-on-save t))
#+end_src

*** Text Editing
**** indentation and whitespace
***** aggressive indent
This package reindents the file being edited after every change. Pretty useful.
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :straight t
    :config
    (global-indent-mode 1))
#+end_src

***** Delete trailing whitespace
This deletes trailing whitespace when the buffer is saved.
#+begin_src emacs-lisp
  (setq my/trailing-whitespace-modes '(markdown-mode))

  (require 'cl-extra)

  (add-hook 'before-save-hook
	    (lambda ()
	      (unless (cl-some #'derived-mode-p my/trailing-whitespace-modes)
		(delete-trailing-whitespace))))
#+end_src

***** set tabs
Default tab settings, namely, no tabs, and also, a tab equaling four spaces.
#+begin_src emacs-lisp
  (setq tab-always-indent nil)
  (setq-default default-tab-width 4)
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+end_src
**** Settings
***** Scrolling
#+begin_src emacs-lisp
  (setq scroll-conservatively scroll-margin)
  (setq scroll-step 1)
  (setq scroll-preserve-screen-position t)
  (setq scroll-error-top-bottom t)
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-inhibit-click-time nil)
#+end_src
***** Clipboard
#+begin_src emacs-lisp
  (setq select-enable-clipboard t)
  (setq mouse-yank-at-point t)
#+end_src

***** Backups
#+begin_src emacs-lisp
  (setq backup-inhibited t)
  (setq auto-save-default nil)
#+end_src

**** Undo Tree
Replaces Emacs built-in sequential undo system with a tree-based one. Probably one of the greatest options of Emacs as a text editor.

#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-auto-save-history nil)
    (my-leader-def "u" 'undo-tree-visualize)
    (fset 'undo-auto-amalgamate 'ignore)
    (setq undo-limit 6710886400)
    (setq undo-strong-limit 100663296)
    (setq undo-outer-limit 1006632960))
#+end_src
